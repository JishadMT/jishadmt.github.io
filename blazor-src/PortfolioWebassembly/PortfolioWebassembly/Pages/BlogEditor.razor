@using System.Text.Json
@page "/blog-editor"
@page "/blog-editor/{slug?}"
@using PortfolioWebassembly.ViewModels
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<PageTitle>Blog Editor</PageTitle>

<div class="container-fluid py-4">
    <div class="row vh-80 overflow-y-auto">
        <!-- Editor Column -->
        <div class="col-md-6">
            <h2 class="mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                </svg>
                Editor
            </h2>

            <div class="accordion" id="blogDetailsAccordion">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#blogDetailsCollapse" aria-expanded="true" aria-controls="blogDetailsCollapse">
                            Blog Details
                        </button>
                    </h2>
                    <div id="blogDetailsCollapse" class="accordion-collapse collapse show" data-bs-parent="#blogDetailsAccordion">
                        <div class="accordion-body">
                            <div class="mb-3">
                                <label for="blogTitle" class="form-label">Title</label>
                                <input type="text" class="form-control" id="blogTitle" @bind="blog.Title" />
                            </div>

                            <div class="mb-3">
                                <label for="blogDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="blogDescription" rows="2" @bind="blog.Description"></textarea>
                            </div>

                            <div class="mb-3">
                                <label for="blogDate" class="form-label">Date</label>
                                <input type="date" class="form-control" id="blogDate" @bind="blog.Date" />
                            </div>

                            <div class="mb-3">
                                <label for="blogImage" class="form-label">Image URL</label>
                                <input type="text" class="form-control" id="blogImage" @bind="blog.Image" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="blogTags" class="form-label">Tags (comma-separated)</label>
                                <input type="text" class="form-control" id="blogTags" @bind="tagsInput" @bind:event="oninput" />
                                <div class="mt-2">
                                    @foreach (var tag in blog?.Tags)
                                    {
                                        <span class="badge text-bg-light me-2 text-secondary">@tag</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="my-3">
                <label for="editor" class="form-label">Content</label>
                <div id="editor">
                    @((MarkupString)@blog.Content)
                </div>
            </div>

            <div class="text-end">
                <button class="btn btn-primary btn-purple" @onclick="SaveBlog">Save Blog</button>
            </div>
        </div>

        <!-- Preview Column -->
        <div class="col-md-6">
            <h2 class="mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
                    <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13 13 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5s3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5s-3.879-1.168-5.168-2.457A13 13 0 0 1 1.172 8z"/>
                    <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0"/>
                </svg>
                Preview
            </h2>
            <div class="border rounded p-3 max-vh-70 overflow-y-auto">
                <header class="container">
                    <img src="../assets/images/blogs/@blog.Image" class="blog-banner-image mb-5">
                    <label class="text-secondary mb-3">@blog.Date.ToString("MMMM dd, yyyy")</label>
                    <h2 class="mb-5">@blog.Title</h2>    
                </header>
                <div class="px-3">
                    @((MarkupString)editorContent)
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string? slug { get; set; } = string.Empty;
    private Blog blog = new Blog() { Date = DateTime.Today, Tags = new List<string>() };
    private string editorContent = "";
    private DotNetObjectReference<BlogEditor>? objRef;
    private string tagsInput = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Initialize the blogs list here
        blog = await LoadBlogAsync();
        editorContent = blog.Content;
        tagsInput = string.Join(",", blog.Tags ?? new List<string>());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initCKEditor", objRef);
        }
    }

    [JSInvokable]
    public async Task OnEditorChange()
    {
        editorContent = await JSRuntime.InvokeAsync<string>("getCKEditorContent");
        blog.Content = editorContent;
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task SaveBlog()
    {
        var blogs = await Http.GetFromJsonAsync<List<Blog>>("assets/blogs/blogs.json") ?? new List<Blog>();

        // Update existing blog or add new one
        var existingBlog = blogs.FirstOrDefault(b => b.Link == blog.Link);
        if (existingBlog != null)
        {
            var index = blogs.IndexOf(existingBlog);
            blogs[index] = blog;
        }
        else
        {
            blog.Id = blogs.Count + 1;
            blog.Tags = tagsInput.Split(',').Select(t => t.Trim()).ToList();
            blogs = blogs.Prepend(blog).ToList();
        }

        var options = new JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping };
        var jsonString = JsonSerializer.Serialize(blogs, options);
        
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", jsonString);
        await JSRuntime.InvokeVoidAsync("alert", "Blog content copied to clipboard! Paste it in blogs.json file, and reserve application to update the blogs list.");
    }
    
    private async Task<Blog> LoadBlogAsync()
    {
        List<Blog> blogs = await Http.GetFromJsonAsync<List<Blog>>("assets/blogs/blogs.json");
        return blogs.FirstOrDefault(b => b.Link == slug) ?? new Blog() { Date = DateTime.Today, Tags = new List<string>() };
    }
}
